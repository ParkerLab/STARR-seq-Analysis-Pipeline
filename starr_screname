#!/usr/bin/env python

#
# screname: Renames FASTQ files from the University of Michigan DNA
# Sequencing Core to encode library metadata that mka can parse to
# automate the creation of analysis pipelines.
#

from __future__ import print_function
import argparse
import csv
import os
import re
import sys
import textwrap


SEQCORE_RE = re.compile('^\d+_(?P<barcode>[-ACGT]+)_S(?P<samplenumber>\d+)_L(?P<lane>\d+)_R(?P<pair_index>\d)_\d+\.fastq.gz$')
MKA_TEMPLATE = '{sample}___{library}___L{lane}___{description}.{pair_index}.fq.gz'

def read_runinfo(filename):
    """
    Reads the CSV containing run info.

    The UM DNA Sequencing Core supplies a CSV file with each run's
    results. They're usually named Run_<number>_<investigator>.csv.

    The files contain sample IDs, lanes, barcodes, projects (usually
    just the investigator's uniqname, unfortunately) and descriptions
    of each sample, as supplied when submitted for sequencing.
    """

    # strip header garbage
    lines = []
    indata = False
    with open(filename) as f:
        for line in f:
            line = line.strip()

            if not indata:
                if line.startswith('[Data],,'):
                    indata = True
                else:
                    continue
            else:
                lines.append(line)

    samples = {}
    reader = csv.DictReader(lines, dialect='excel')
    for line in reader:
        samples[line['Sample_ID'].replace('Sample_', '')] = line
    return samples


def read_overrides(filename):
    overrides = {}
    reader = csv.DictReader(open(filename), dialect='excel')
    for line in reader:
        overrides[line['SeqCoreID']] = line
    return overrides


def parse_arguments():
    parser = argparse.ArgumentParser(
        prog='screname',
        formatter_class=argparse.ArgumentDefaultsHelpFormatter,
        description=textwrap.dedent("""

        Given a CSV run information file from the UM DNA Sequencing Core,
        a path to a directory containing a sequencing run's FASTQ files,
        and a path to a target directory, link the original FASTQ files to
        the target directory using names that encode sequencing metadata
        like sample, library, description, and so on.

        """) + '\n\n'
    )

    parser.add_argument('-v', '--verbose', action='store_true', help='Display more details while renaming.')
    parser.add_argument('-o', '--overrides', help='A CSV containing metadata to use instead of that supplied by the sequencing core. Must contain four fields: SeqCoreID (which is SampleID in the run info CSV, without the "Sample_" prefix), Sample, Library, and Description.')
    parser.add_argument('csv', help='The CSV run info file.')
    parser.add_argument('src', help='The directory containing the sample directories, which in turn contain the original FASTQ files.')
    parser.add_argument('dest', help='The directory in which links to the original FASTQ files will be created, using names that encode sequencing metadata for mka.')


    return parser.parse_args()


args = parse_arguments()

samples = read_runinfo(args.csv)

if not samples:
    print('Found no metadata in {}'.format(args.csv))
    sys.exit(1)

overrides = args.overrides and read_overrides(args.overrides) or {}

src_root = os.path.abspath(args.src)
dest = os.path.abspath(args.dest)

if not os.path.isdir(args.dest):
    os.makedirs(args.dest)

for sample, metadata in sorted(samples.items()):
    context = {
        'sample': sample,
        'library': sample,
        'description': metadata['Description']
    }

    if 'input' in metadata['Description']:
        context['description'] = '{}_{}'.format(context['sample'], 'inputDNA')
    
    if sample in overrides:
        context.update({
            'sample': overrides[sample]['Sample'],
            'library': overrides[sample]['Library'],
            'description': overrides[sample]['Description'].replace(' ', '%20'),
        })

    srcdir = os.path.join(args.src, metadata['Sample_ID'])

    if args.verbose:
        print('Looking for FASTQ files in {}'.format(srcdir))

    for fq in sorted(os.listdir(srcdir)):
        m = SEQCORE_RE.match(fq)
        if not m:
            print("""File does not match our notion of the sequencing core's file naming scheme.""", file=sys.stderr)
            sys.exit(1)

        context.update(m.groupdict())

        dst = os.path.join(args.dest, MKA_TEMPLATE.format(**context))
        srcpath = os.path.abspath(os.path.join(srcdir, fq))
        srcrelpath = os.path.relpath(srcpath, dest)
        print('Linking {} -> {}'.format(srcrelpath, dst))
        os.symlink(srcrelpath, dst)
